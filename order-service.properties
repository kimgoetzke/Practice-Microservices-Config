# Postgres database
spring.datasource.url=jdbc:postgresql://localhost:5432/microservice-order

# Create database when application is started and drop it again when terminated
spring.jpa.hibernate.ddl-auto=create-drop

# Eureka configuration
server.port=0

# Spring Boot Actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoints.health.show-details=always

# Resilience4J circuit breaker
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=3
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=2
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.timelimiter.instances.inventory.timeout-duration=3s
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

# Kafka configuration
spring.kafka.bootstrap-servers=http://localhost:9092
spring.kafka.template.default-topic=orderNotification
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.example.business.OrderEvent